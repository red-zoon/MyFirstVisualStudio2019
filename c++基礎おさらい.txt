Hello World -> Hello World
コメント -> /*, */で囲まれたものか //の後ろ、プログラムで呼ばれない
ヘッダファイル -> 宣言する場所
名前空間 -> stdみたいなやつ、ついてるのとそうじゃないのなら変数名同じでも平気
文字列出力 -> std::coutとstd::endl
関数の記述 -> 戻り値と引数

変数の宣言 -> 使うとこより前に
初期化 -> int i{0}とint i = 0
名前空間 -> 上と同じ
using指令 -> 先にstdって打つとそのクラス内でいらなくなる
using宣言 -> std::coutまで打つとstd::coutだけstdいらなくなる

bool -> 0か1かで真か偽か
string -> 文字列
構造体の型名 -> 構造体の名前
const修飾子 -> つけたものが定数にする
参照 -> 型名 + &で参照型になる
実行時情報 -> 

標準入出力 -> 入力 std::cin,出力 std::cout
マニピュレータ -> 改行とか書式とかいじるやつ

オーバーロード -> 引数違うなら同じ関数名も使える
デフォルト引数 -> 値がなければこれ入れとけを定義のときに作れる
インライン関数 -> 

クラス -> 変数や関数の塊の型
メンバ関数の定義 -> 必要な引数やconstなどをヘッダファイルで宣言
thisポインタ -> 自身を指すポインタ
アクセス指定子 -> アクセスの範囲を指定 private,public
フレンド -> フレンドにするとprivateを参照できる
静的メンバ -> static,クラス名::関数名(引数)で使える
構造体とクラスの違い -> デフォルトのアクセスの範囲が違う

コンストラクタ -> インスタンスが生成されるときに呼ばれる関数
デフォルトコンストラクタ -> 引数のないコンストラクタ
初期化子リスト -> コンストラクタの引数の後に : をつけて変数名と値で初期化できる
デストラクタ -> インスタンスの削除時に呼ばれる関数

const修飾子 -> 付けたものを定数にする
constポインタ -> 
const参照 -> 参照先の変数でも値変えさせん
constメンバ変数 -> 
constメンバ関数 -> 関数内で変数の値を変えられなくなる
mutableメンバ関数 -> メンバ関数内で値を変えられる例外

動的メモリ管理 -> newとdelete
配列の動的生成 -> 配列をnewで作る,deleteもいる

オーバーロード可能な演算子 -> 
メンバ関数としての定義 -> そのクラス内で別機能をつけられる
グローバル関数としての定義 -> そのファイル内で別機能をつけられる
出力演算子の定義 -> std::coutとかに仮の名前をつけて使える
前置 / 後置インクリメント演算子 -> ++i/i++

コピーコンストラクタ -> インスタンスの複製の際に呼ばれる
explicit指定子 -> 関数呼び出し時の暗黙的な型変換を防ぐ

クラスの継承 -> あるクラスをもとにそれ扱いの別のクラスを作る
オーバーライド -> 元クラスの関数を派生クラスで再定義する
ポリモーフィズム -> インスタンスの引数によって呼び出されるクラスが変わる
コンストラクタ/デストラクタの呼び出し -> 宣言しなけりゃ元のクラスのが呼ばれる
仮想デストラクタ -> これにしないと親クラスが先にdeleteされると呼び出されれなくなるっていうのを防ぐ
アクセスレベルの継承 -> 継承の際にアクセス指定子をつけるとメンバ関数と変数のアクセス範囲をいじれる
純粋仮想関数 -> 派生クラスに実装を強制する関数
多重継承 -> 派生クラスは複数のクラスを継承できる
仮想継承 -> 多重継承で菱形継承が起こってメンバ名が被ったときにそれを解決する

例外 -> 異常,tryとcatchで検出処理をする、throwで意図的に例外を発生させられる
例外クラス -> throwで発生させる例外用クラス
例外の伝播 -> catchされない例外はどんどん処理を進めていく
例外仕様 -> 予め例外の型を列挙しておく

旧式のキャスト -> C形式 (int)f, 関数形式 int(f)
名前付きキャスト -> 静的、動的、const、再解釈の4つのキャスト
静的キャスト -> 
動的キャスト -> 基底クラスを派生クラスにキャストする
constキャスト -> 定数を変数にキャスト
再解釈キャスト -> 互換性のないものを無理やりキャスト

型パラメータ -> テンプレートの型
値パラメータ -> テンプレートの値
クラステンプレート -> 型が自由のテンプレート
テンプレートの特殊化 -> 特定の型に特殊な処理を持たせられる
テンプレートメタプログラミング -> コンパイル時に計算して値を出す関数

STL -> テンプレートクラスやテンプレート関数が入ってるライブラリ
コンテナ -> 配列
アルゴリズム -> コンテナを操作するテンプレート関数
ファンクタ -> 